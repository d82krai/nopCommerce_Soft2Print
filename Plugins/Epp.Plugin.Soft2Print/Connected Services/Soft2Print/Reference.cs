//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Soft2Print
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Soft2Print.Organization_API_v4Soap")]
    public interface Organization_API_v4Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agent_GetConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Agent_GetConfigurationAsync(string organizationName, string organizationCode, string agentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agent_SetImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Agent_SetImageAsync(string organizationName, string organizationCode, string agentID, string imageXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Agent_DeleteReference", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Agent_DeleteReferenceAsync(string organizationName, string organizationCode, string agentID, string customerReference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_CreateAsync(
                    string organizationName, 
                    string organizationCode, 
                    string guid, 
                    string orderID, 
                    string currency, 
                    string company, 
                    string title, 
                    string firstname, 
                    string surname, 
                    string address_1, 
                    string address_2, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string phono_1, 
                    string phono_2, 
                    string phono_3, 
                    string email, 
                    string shipCompany, 
                    string shipTitle, 
                    string shipFirstname, 
                    string shipSurname, 
                    string shipAddress_1, 
                    string shipAddress_2, 
                    string shipPostalCode, 
                    string shipCity, 
                    string shipCountry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_AddInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_AddInfoAsync(string organizationName, string organizationCode, string orderID, string xmlInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_AddJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_AddJobAsync(string organizationName, string organizationCode, string orderID, string jobId, int quantity, decimal price, decimal prePaid_Value, string prePaid_VoucherID, int reasonCode, string suplierInfo, bool useImageEnhancement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_AddFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_AddFilesAsync(string organizationName, string organizationCode, string orderID, string filePath, int suplierID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_Confirm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_ConfirmAsync(string organizationName, string organizationCode, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_Hold", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_HoldAsync(string organizationName, string organizationCode, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_Cancel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_CancelAsync(string organizationName, string organizationCode, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_TrckingCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> Order_TrckingCodeAsync(string organizationName, string organizationCode, string orderID, string jobID, string transportType, string trckingCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_GetSplitOrderInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetSplitOrderInfoAsync(string organizationName, string organizationCode, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetStatusAsync(string organizationName, string organizationCode, string orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_GetInfo_BySystemOrderID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetInfo_BySystemOrderIDAsync(string organizationName, string organizationCode, int orderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Order_GetInfo_ByJobID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetInfo_ByJobIDAsync(string organizationName, string organizationCode, int jobID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Validate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ValidateAsync(string organizationName, string organizationCode, string cultureCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ValidateUserAsync(string organizationName, string organizationCode, string cultureCode, string customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateAssignUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ValidateAssignUserAsync(string organizationName, string organizationCode, string guid, string customerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ValidateLoginID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ValidateLoginIDAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogoutUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task LogoutUserAsync(string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_GetProjectInfo_ByJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetProjectInfo_ByJobAsync(string organizationName, string organizationCode, string guid, int jobID, bool isExtended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_GetProjectInfo_ByProject", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetProjectInfo_ByProjectAsync(string organizationName, string organizationCode, string guid, int projectID, bool isExtended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> UserProject_CreateAsync(string organizationName, string organizationCode, string guid, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Create_Configured", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> UserProject_Create_ConfiguredAsync(string organizationName, string organizationCode, string guid, string projectName, string configurationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Create_ActionValue_Configured", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> UserProject_Create_ActionValue_ConfiguredAsync(string organizationName, string organizationCode, string guid, string projectName, string configurationID, string moduleType, string actionValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_GetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetListAsync(string organizationName, string organizationCode, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Update_Rename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserProject_Update_RenameAsync(string organizationName, string organizationCode, string guid, int projectID, string projectName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Duplicate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> UserProject_DuplicateAsync(string organizationName, string organizationCode, string guid, int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserProject_DeleteAsync(string organizationName, string organizationCode, string guid, int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_Share", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Guid> UserProject_ShareAsync(string organizationName, string organizationCode, string guid, int projectID, string shareMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_ShareDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserProject_ShareDeleteAsync(string organizationName, string organizationCode, string guid, string shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_ShareUnlock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserProject_ShareUnlockAsync(string organizationName, string organizationCode, string guid, string shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_ShareGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_ShareGetAsync(string organizationName, string organizationCode, string shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserProject_ShareRemoveFromList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserProject_ShareRemoveFromListAsync(string organizationName, string organizationCode, string guid, string shareID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MasterProject_Create", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<int> MasterProject_CreateAsync(string organizationName, string organizationCode, string guid, int projectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MasterProject_GetList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> MasterProject_GetListAsync(string organizationName, string organizationCode, string guid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MasterProject_Delete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> MasterProject_DeleteAsync(string organizationName, string organizationCode, string guid, int masterProjectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/MasterProject_Rename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> MasterProject_RenameAsync(string organizationName, string organizationCode, string guid, int masterProjectID, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_GetImages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserImages_GetImagesAsync(string organizationName, string organizationCode, string guid, string infoFilter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_GetImages_LazyLoading", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> UserImages_GetImages_LazyLoadingAsync(string organizationName, string organizationCode, string guid, string infoFilter, string parentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_RemoveImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_RemoveImageAsync(string organizationName, string organizationCode, string guid, int pictureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_RemoveImageFromFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_RemoveImageFromFolderAsync(string organizationName, string organizationCode, string guid, int pictureID, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_RemoveFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_RemoveFolderAsync(string organizationName, string organizationCode, string guid, int folderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_RenameFolder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_RenameFolderAsync(string organizationName, string organizationCode, string guid, int folderID, string newFolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_Move", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_MoveAsync(string organizationName, string organizationCode, string guid, int pictureID, int sourceFolderID, int destinationFolderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_Copy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_CopyAsync(string organizationName, string organizationCode, string guid, int pictureID, int destinationFolderID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UserImages_AddImageCollection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> UserImages_AddImageCollectionAsync(string organizationName, string organizationCode, string guid, string collectionIdentifier, string destinationFolderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ChangeLanguageAsync(string organizationName, string organizationCode, string guid, string cultureCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeStyle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ChangeStyleAsync(string organizationName, string organizationCode, string guid, string styleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeCheatMode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ChangeCheatModeAsync(string organizationName, string organizationCode, string guid, bool cheatMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChangeUrlPackage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> ChangeUrlPackageAsync(string organizationName, string organizationCode, string guid, string identifier);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Library_GetStructure", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Library_GetStructureAsync(string organizationName, string organizationCode, string guid, string type, string libraryChannel, string actionValue, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Library_GetItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Library_GetItemAsync(string organizationName, string organizationCode, string guid, string actionValue, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomersJob", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> GetCustomersJobAsync(string organizationName, string organizationCode, string customerID, string notForImplimentation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Report_UserProject_Inactive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.Xml.XmlElement> Report_UserProject_InactiveAsync(string organizationName, string organizationCode, int inactivityDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Version", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VersionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface Organization_API_v4SoapChannel : Soft2Print.Organization_API_v4Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class Organization_API_v4SoapClient : System.ServiceModel.ClientBase<Soft2Print.Organization_API_v4Soap>, Soft2Print.Organization_API_v4Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Organization_API_v4SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(Organization_API_v4SoapClient.GetBindingForEndpoint(endpointConfiguration), Organization_API_v4SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Organization_API_v4SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Organization_API_v4SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Organization_API_v4SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Organization_API_v4SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Organization_API_v4SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> Agent_GetConfigurationAsync(string organizationName, string organizationCode, string agentID)
        {
            return base.Channel.Agent_GetConfigurationAsync(organizationName, organizationCode, agentID);
        }
        
        public System.Threading.Tasks.Task<bool> Agent_SetImageAsync(string organizationName, string organizationCode, string agentID, string imageXML)
        {
            return base.Channel.Agent_SetImageAsync(organizationName, organizationCode, agentID, imageXML);
        }
        
        public System.Threading.Tasks.Task<bool> Agent_DeleteReferenceAsync(string organizationName, string organizationCode, string agentID, string customerReference)
        {
            return base.Channel.Agent_DeleteReferenceAsync(organizationName, organizationCode, agentID, customerReference);
        }
        
        public System.Threading.Tasks.Task<bool> Order_CreateAsync(
                    string organizationName, 
                    string organizationCode, 
                    string guid, 
                    string orderID, 
                    string currency, 
                    string company, 
                    string title, 
                    string firstname, 
                    string surname, 
                    string address_1, 
                    string address_2, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string phono_1, 
                    string phono_2, 
                    string phono_3, 
                    string email, 
                    string shipCompany, 
                    string shipTitle, 
                    string shipFirstname, 
                    string shipSurname, 
                    string shipAddress_1, 
                    string shipAddress_2, 
                    string shipPostalCode, 
                    string shipCity, 
                    string shipCountry)
        {
            return base.Channel.Order_CreateAsync(organizationName, organizationCode, guid, orderID, currency, company, title, firstname, surname, address_1, address_2, postalCode, city, country, phono_1, phono_2, phono_3, email, shipCompany, shipTitle, shipFirstname, shipSurname, shipAddress_1, shipAddress_2, shipPostalCode, shipCity, shipCountry);
        }
        
        public System.Threading.Tasks.Task<bool> Order_AddInfoAsync(string organizationName, string organizationCode, string orderID, string xmlInfo)
        {
            return base.Channel.Order_AddInfoAsync(organizationName, organizationCode, orderID, xmlInfo);
        }
        
        public System.Threading.Tasks.Task<bool> Order_AddJobAsync(string organizationName, string organizationCode, string orderID, string jobId, int quantity, decimal price, decimal prePaid_Value, string prePaid_VoucherID, int reasonCode, string suplierInfo, bool useImageEnhancement)
        {
            return base.Channel.Order_AddJobAsync(organizationName, organizationCode, orderID, jobId, quantity, price, prePaid_Value, prePaid_VoucherID, reasonCode, suplierInfo, useImageEnhancement);
        }
        
        public System.Threading.Tasks.Task<bool> Order_AddFilesAsync(string organizationName, string organizationCode, string orderID, string filePath, int suplierID)
        {
            return base.Channel.Order_AddFilesAsync(organizationName, organizationCode, orderID, filePath, suplierID);
        }
        
        public System.Threading.Tasks.Task<bool> Order_ConfirmAsync(string organizationName, string organizationCode, string orderID)
        {
            return base.Channel.Order_ConfirmAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<bool> Order_HoldAsync(string organizationName, string organizationCode, string orderID)
        {
            return base.Channel.Order_HoldAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<bool> Order_CancelAsync(string organizationName, string organizationCode, string orderID)
        {
            return base.Channel.Order_CancelAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<bool> Order_TrckingCodeAsync(string organizationName, string organizationCode, string orderID, string jobID, string transportType, string trckingCode)
        {
            return base.Channel.Order_TrckingCodeAsync(organizationName, organizationCode, orderID, jobID, transportType, trckingCode);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetSplitOrderInfoAsync(string organizationName, string organizationCode, string orderID)
        {
            return base.Channel.Order_GetSplitOrderInfoAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetStatusAsync(string organizationName, string organizationCode, string orderID)
        {
            return base.Channel.Order_GetStatusAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetInfo_BySystemOrderIDAsync(string organizationName, string organizationCode, int orderID)
        {
            return base.Channel.Order_GetInfo_BySystemOrderIDAsync(organizationName, organizationCode, orderID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Order_GetInfo_ByJobIDAsync(string organizationName, string organizationCode, int jobID)
        {
            return base.Channel.Order_GetInfo_ByJobIDAsync(organizationName, organizationCode, jobID);
        }
        
        public System.Threading.Tasks.Task<string> ValidateAsync(string organizationName, string organizationCode, string cultureCode)
        {
            return base.Channel.ValidateAsync(organizationName, organizationCode, cultureCode);
        }
        
        public System.Threading.Tasks.Task<string> ValidateUserAsync(string organizationName, string organizationCode, string cultureCode, string customerID)
        {
            return base.Channel.ValidateUserAsync(organizationName, organizationCode, cultureCode, customerID);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAssignUserAsync(string organizationName, string organizationCode, string guid, string customerID)
        {
            return base.Channel.ValidateAssignUserAsync(organizationName, organizationCode, guid, customerID);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateLoginIDAsync(string guid)
        {
            return base.Channel.ValidateLoginIDAsync(guid);
        }
        
        public System.Threading.Tasks.Task LogoutUserAsync(string guid)
        {
            return base.Channel.LogoutUserAsync(guid);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetProjectInfo_ByJobAsync(string organizationName, string organizationCode, string guid, int jobID, bool isExtended)
        {
            return base.Channel.UserProject_GetProjectInfo_ByJobAsync(organizationName, organizationCode, guid, jobID, isExtended);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetProjectInfo_ByProjectAsync(string organizationName, string organizationCode, string guid, int projectID, bool isExtended)
        {
            return base.Channel.UserProject_GetProjectInfo_ByProjectAsync(organizationName, organizationCode, guid, projectID, isExtended);
        }
        
        public System.Threading.Tasks.Task<int> UserProject_CreateAsync(string organizationName, string organizationCode, string guid, string projectName)
        {
            return base.Channel.UserProject_CreateAsync(organizationName, organizationCode, guid, projectName);
        }
        
        public System.Threading.Tasks.Task<int> UserProject_Create_ConfiguredAsync(string organizationName, string organizationCode, string guid, string projectName, string configurationID)
        {
            return base.Channel.UserProject_Create_ConfiguredAsync(organizationName, organizationCode, guid, projectName, configurationID);
        }
        
        public System.Threading.Tasks.Task<int> UserProject_Create_ActionValue_ConfiguredAsync(string organizationName, string organizationCode, string guid, string projectName, string configurationID, string moduleType, string actionValue)
        {
            return base.Channel.UserProject_Create_ActionValue_ConfiguredAsync(organizationName, organizationCode, guid, projectName, configurationID, moduleType, actionValue);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_GetListAsync(string organizationName, string organizationCode, string guid)
        {
            return base.Channel.UserProject_GetListAsync(organizationName, organizationCode, guid);
        }
        
        public System.Threading.Tasks.Task<bool> UserProject_Update_RenameAsync(string organizationName, string organizationCode, string guid, int projectID, string projectName)
        {
            return base.Channel.UserProject_Update_RenameAsync(organizationName, organizationCode, guid, projectID, projectName);
        }
        
        public System.Threading.Tasks.Task<int> UserProject_DuplicateAsync(string organizationName, string organizationCode, string guid, int projectID)
        {
            return base.Channel.UserProject_DuplicateAsync(organizationName, organizationCode, guid, projectID);
        }
        
        public System.Threading.Tasks.Task<bool> UserProject_DeleteAsync(string organizationName, string organizationCode, string guid, int projectID)
        {
            return base.Channel.UserProject_DeleteAsync(organizationName, organizationCode, guid, projectID);
        }
        
        public System.Threading.Tasks.Task<System.Guid> UserProject_ShareAsync(string organizationName, string organizationCode, string guid, int projectID, string shareMode)
        {
            return base.Channel.UserProject_ShareAsync(organizationName, organizationCode, guid, projectID, shareMode);
        }
        
        public System.Threading.Tasks.Task<bool> UserProject_ShareDeleteAsync(string organizationName, string organizationCode, string guid, string shareID)
        {
            return base.Channel.UserProject_ShareDeleteAsync(organizationName, organizationCode, guid, shareID);
        }
        
        public System.Threading.Tasks.Task<bool> UserProject_ShareUnlockAsync(string organizationName, string organizationCode, string guid, string shareID)
        {
            return base.Channel.UserProject_ShareUnlockAsync(organizationName, organizationCode, guid, shareID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserProject_ShareGetAsync(string organizationName, string organizationCode, string shareID)
        {
            return base.Channel.UserProject_ShareGetAsync(organizationName, organizationCode, shareID);
        }
        
        public System.Threading.Tasks.Task<bool> UserProject_ShareRemoveFromListAsync(string organizationName, string organizationCode, string guid, string shareID)
        {
            return base.Channel.UserProject_ShareRemoveFromListAsync(organizationName, organizationCode, guid, shareID);
        }
        
        public System.Threading.Tasks.Task<int> MasterProject_CreateAsync(string organizationName, string organizationCode, string guid, int projectID)
        {
            return base.Channel.MasterProject_CreateAsync(organizationName, organizationCode, guid, projectID);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> MasterProject_GetListAsync(string organizationName, string organizationCode, string guid)
        {
            return base.Channel.MasterProject_GetListAsync(organizationName, organizationCode, guid);
        }
        
        public System.Threading.Tasks.Task<bool> MasterProject_DeleteAsync(string organizationName, string organizationCode, string guid, int masterProjectID)
        {
            return base.Channel.MasterProject_DeleteAsync(organizationName, organizationCode, guid, masterProjectID);
        }
        
        public System.Threading.Tasks.Task<bool> MasterProject_RenameAsync(string organizationName, string organizationCode, string guid, int masterProjectID, string newName)
        {
            return base.Channel.MasterProject_RenameAsync(organizationName, organizationCode, guid, masterProjectID, newName);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserImages_GetImagesAsync(string organizationName, string organizationCode, string guid, string infoFilter)
        {
            return base.Channel.UserImages_GetImagesAsync(organizationName, organizationCode, guid, infoFilter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> UserImages_GetImages_LazyLoadingAsync(string organizationName, string organizationCode, string guid, string infoFilter, string parentID)
        {
            return base.Channel.UserImages_GetImages_LazyLoadingAsync(organizationName, organizationCode, guid, infoFilter, parentID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_RemoveImageAsync(string organizationName, string organizationCode, string guid, int pictureID)
        {
            return base.Channel.UserImages_RemoveImageAsync(organizationName, organizationCode, guid, pictureID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_RemoveImageFromFolderAsync(string organizationName, string organizationCode, string guid, int pictureID, int folderID)
        {
            return base.Channel.UserImages_RemoveImageFromFolderAsync(organizationName, organizationCode, guid, pictureID, folderID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_RemoveFolderAsync(string organizationName, string organizationCode, string guid, int folderID)
        {
            return base.Channel.UserImages_RemoveFolderAsync(organizationName, organizationCode, guid, folderID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_RenameFolderAsync(string organizationName, string organizationCode, string guid, int folderID, string newFolderName)
        {
            return base.Channel.UserImages_RenameFolderAsync(organizationName, organizationCode, guid, folderID, newFolderName);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_MoveAsync(string organizationName, string organizationCode, string guid, int pictureID, int sourceFolderID, int destinationFolderID)
        {
            return base.Channel.UserImages_MoveAsync(organizationName, organizationCode, guid, pictureID, sourceFolderID, destinationFolderID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_CopyAsync(string organizationName, string organizationCode, string guid, int pictureID, int destinationFolderID)
        {
            return base.Channel.UserImages_CopyAsync(organizationName, organizationCode, guid, pictureID, destinationFolderID);
        }
        
        public System.Threading.Tasks.Task<bool> UserImages_AddImageCollectionAsync(string organizationName, string organizationCode, string guid, string collectionIdentifier, string destinationFolderName)
        {
            return base.Channel.UserImages_AddImageCollectionAsync(organizationName, organizationCode, guid, collectionIdentifier, destinationFolderName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeLanguageAsync(string organizationName, string organizationCode, string guid, string cultureCode)
        {
            return base.Channel.ChangeLanguageAsync(organizationName, organizationCode, guid, cultureCode);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeStyleAsync(string organizationName, string organizationCode, string guid, string styleName)
        {
            return base.Channel.ChangeStyleAsync(organizationName, organizationCode, guid, styleName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeCheatModeAsync(string organizationName, string organizationCode, string guid, bool cheatMode)
        {
            return base.Channel.ChangeCheatModeAsync(organizationName, organizationCode, guid, cheatMode);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUrlPackageAsync(string organizationName, string organizationCode, string guid, string identifier)
        {
            return base.Channel.ChangeUrlPackageAsync(organizationName, organizationCode, guid, identifier);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Library_GetStructureAsync(string organizationName, string organizationCode, string guid, string type, string libraryChannel, string actionValue, string filter)
        {
            return base.Channel.Library_GetStructureAsync(organizationName, organizationCode, guid, type, libraryChannel, actionValue, filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Library_GetItemAsync(string organizationName, string organizationCode, string guid, string actionValue, string filter)
        {
            return base.Channel.Library_GetItemAsync(organizationName, organizationCode, guid, actionValue, filter);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> GetCustomersJobAsync(string organizationName, string organizationCode, string customerID, string notForImplimentation)
        {
            return base.Channel.GetCustomersJobAsync(organizationName, organizationCode, customerID, notForImplimentation);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> Report_UserProject_InactiveAsync(string organizationName, string organizationCode, int inactivityDays)
        {
            return base.Channel.Report_UserProject_InactiveAsync(organizationName, organizationCode, inactivityDays);
        }
        
        public System.Threading.Tasks.Task<string> VersionAsync()
        {
            return base.Channel.VersionAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Organization_API_v4Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.Organization_API_v4Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.Organization_API_v4Soap))
            {
                return new System.ServiceModel.EndpointAddress("https://services.soft2print.com/Organization_API_V4.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.Organization_API_v4Soap12))
            {
                return new System.ServiceModel.EndpointAddress("https://services.soft2print.com/Organization_API_V4.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            Organization_API_v4Soap,
            
            Organization_API_v4Soap12,
        }
    }
}
